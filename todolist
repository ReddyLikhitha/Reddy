import tkinter as tk
import json
import datetime

class ToDoListApp(tk.Tk):
    def _init_(self):
        super()._init_()
        self.title("To-Do List")
        self.geometry("400x400")

        self.tasks = []
        self.load_tasks()

        self.task_entry = tk.Entry(self, width=30)
        self.task_entry.pack(pady=10)

        self.add_button = tk.Button(self, text="Add Task", command=self.add_task)
        self.add_button.pack()

        self.task_list = tk.Listbox(self, height=10, selectmode=tk.SINGLE)
        self.task_list.pack(pady=10)

        self.update_button = tk.Button(self, text="Update Task", command=self.update_task)
        self.update_button.pack()

        self.complete_button = tk.Button(self, text="Complete Task", command=self.complete_task)
        self.complete_button.pack()

        self.delete_button = tk.Button(self, text="Delete Task", command=self.delete_task)
        self.delete_button.pack()

    def load_tasks(self):
        try:
            with open("tasks.json", "r") as f:
                self.tasks = json.load(f)
                self.update_task_list()
        except FileNotFoundError:
            pass

    def save_tasks(self):
        with open("tasks.json", "w") as f:
            json.dump(self.tasks, f, indent=4)

    def add_task(self):
        task = self.task_entry.get()
        if task:
            self.tasks.append({"task": task, "completed": False, "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
            self.save_tasks()
            self.update_task_list()
            self.task_entry.delete(0, tk.END)

    def update_task_list(self):
        self.task_list.delete(0, tk.END)
        for i, task in enumerate(self.tasks):
            status = "Completed" if task["completed"] else "Pending"
            self.task_list.insert(i, f"{i+1}. {task['task']} - {status} (Created at: {task['created_at']})")

    def update_task(self):
        selected_index = self.task_list.curselection()
        if selected_index:
            index = selected_index[0]
            new_task = self.task_entry.get()
            if new_task:
                self.tasks[index]["task"] = new_task
                self.save_tasks()
                self.update_task_list()
                self.task_entry.delete(0, tk.END)

    def complete_task(self):
        selected_index = self.task_list.curselection()
        if selected_index:
            index = selected_index[0]
            self.tasks[index]["completed"] = True
            self.save_tasks()
            self.update_task_list()

    def delete_task(self):
        selected_index = self.task_list.curselection()
        if selected_index:
            index = selected_index[0]
            del self.tasks[index]
            self.save_tasks()
            self.update_task_list()

if _name_ == "_main_":
    app = ToDoListApp()
    app.mainloop()
